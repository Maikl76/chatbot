import requests
import os
import pandas as pd
import logging
import time  
from flask import Flask, render_template, request, jsonify
from bs4 import BeautifulSoup
import fitz  
from dotenv import load_dotenv
from groq import Groq

# ‚úÖ Naƒçten√≠ API kl√≠ƒçe
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# ‚úÖ Inicializace klienta Groq
client = Groq(api_key=GROQ_API_KEY)

app = Flask(__name__)
app.secret_key = "supersecretkey"

# ‚úÖ Nastaven√≠ logov√°n√≠
logging.basicConfig(level=logging.DEBUG, filename='app.log', filemode='a', format='%(asctime)s - %(levelname)s - %(message)s')

# ‚úÖ Glob√°ln√≠ promƒõnn√° pro sledov√°n√≠ token≈Ø
last_request_time = time.time()
total_tokens_sent = 0
TOKEN_LIMIT_PER_MINUTE = 6000
TOKEN_BUFFER = 500  # Rezerva pro jistotu

# ‚úÖ Funkce pro sledov√°n√≠ a ƒçek√°n√≠
def check_rate_limit():
    global total_tokens_sent, last_request_time

    elapsed_time = time.time() - last_request_time
    if elapsed_time < 60 and total_tokens_sent > (TOKEN_LIMIT_PER_MINUTE - TOKEN_BUFFER):
        wait_time = 60 - elapsed_time
        print(f"‚è≥ P≈ôekroƒçen limit! ƒåek√°m {wait_time:.2f} sekund...")
        time.sleep(wait_time)
        total_tokens_sent = 0  # Resetujeme po 60 sekund√°ch
    last_request_time = time.time()

# ‚úÖ Funkce pro komunikaci s AI (ka≈æd√Ω po≈æadavek max. 1500 token≈Ø)
def ask_groq(question, documents):
    """ Po≈°leme dotaz po mal√Ωch ƒç√°stech max. 1500 token≈Ø a spoj√≠me odpovƒõdi. """
    global total_tokens_sent

    try:
        responses = []

        for i, doc in enumerate(documents):
            text = doc["P≈Øvodn√≠ obsah"]

            # ‚úÖ Rozdƒõlen√≠ textu na 1500 tokenov√© ƒç√°sti
            words = text.split()
            chunk_size = 1500
            text_chunks = [words[i:i + chunk_size] for i in range(0, len(words), chunk_size)]

            for j, chunk in enumerate(text_chunks):
                truncated_text = " ".join(chunk)
                prompt = f"Dokument {i+1}/{len(documents)}, ƒç√°st {j+1}/{len(text_chunks)}:\n{truncated_text}\n\nOt√°zka: {question}\nOdpovƒõƒè:"

                check_rate_limit()  # ‚úÖ Ovƒõ≈ôen√≠ p≈ôed odesl√°n√≠m po≈æadavku

                completion = client.chat.completions.create(
                    model="deepseek-r1-distill-qwen-32b",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.6,
                    max_tokens=500,  # ‚úÖ Ka≈æd√° odpovƒõƒè max. 500 token≈Ø
                    top_p=0.95,
                    stream=False,
                    stop=None
                )

                responses.append(completion.choices[0].message.content.strip())

                # ‚úÖ Aktualizace poƒçtu token≈Ø
                total_tokens_sent += len(truncated_text.split()) + 500
                print(f"üìä Celkem token≈Ø: {total_tokens_sent}")

                # ‚úÖ Pauza mezi po≈æadavky (2 sekundy)
                time.sleep(2)

        return "\n\n".join(responses)

    except Exception as e:
        logging.error(f"‚õî Chyba p≈ôi vol√°n√≠ Groq API: {e}")
        return f"‚ùå Chyba p≈ôi komunikaci s AI: {str(e)}"

# ‚úÖ API endpoint pro AI dotaz
@app.route('/ask', methods=['POST'])
def ask():
    question = request.form.get("question", "").strip()
    selected_source = request.form.get("source", "").strip()

    if not question:
        return jsonify({"error": "Zadejte ot√°zku!"})
    if not selected_source:
        return jsonify({"error": "Vyberte webovou str√°nku!"})

    # ‚úÖ Najdeme dokumenty z vybran√© webov√© str√°nky
    selected_docs = [doc for doc in legislativa_db.to_dict(orient="records") if doc["Odkaz na zdroj"] == selected_source]

    if not selected_docs:
        return jsonify({"error": "≈Ω√°dn√© dokumenty nenalezeny pro vybran√Ω zdroj."})

    answer = ask_groq(question, selected_docs)
    return jsonify({"answer": answer})

# ‚úÖ Hlavn√≠ webov√° str√°nka
@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
